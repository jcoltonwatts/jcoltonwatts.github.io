group_by(sex) %>%
ggplot(aes(x = species, y = pengPlumpInd)) + geom_boxplot()
# filter() to remove rows where sex is NA,
filter(penguins, !is.na(sex)) %>%
# mutate() to calculate penguin plumpness index from body mass and flipper length
mutate(pengPlumpInd = body_mass_g / flipper_length_mm) %>%
group_by(sex) %>%
ggplot(aes(x = species, y = pengPlumpInd)) + geom_boxplot(aes(color = sex))
# filter() to remove rows where sex is NA,
filter(penguins, !is.na(sex)) %>%
# mutate() to calculate penguin plumpness index from body mass and flipper length
mutate(pengPlumpInd = body_mass_g / flipper_length_mm) %>%
ggplot(aes(x = species, y = pengPlumpInd)) + geom_boxplot(aes(color = sex))
# filter() to remove rows where sex is NA,
filter(penguins, !is.na(sex)) %>%
# mutate() to calculate penguin plumpness index from body mass and flipper length
mutate(pengPlumpInd = body_mass_g / flipper_length_mm) %>%
# use ggplot() to plot PPI for each species, grouped by sex.
# the first term just sets up the plot object by saying what the x, y, and grouping variables will be.
# the second term species a "layer" of the objects appearance-- in this case, a boxplot that is colored by sex.
# Note that we don't have to specify our data set for either argument because it is inherited from the pipe.
# Also note that we don't have to re-specify our x, y, and grouping variable in geom_bopxlot because it inherits
# these from the first term (unless we tell it otherwise).
ggplot(aes(x = species, y = pengPlumpInd, by = sex)) + geom_boxplot()
```{r echo = TRUE}
# filter() to remove rows where sex is NA,
filter(penguins, !is.na(sex)) %>%
# mutate() to calculate penguin plumpness index from body mass and flipper length
mutate(pengPlumpInd = body_mass_g / flipper_length_mm) %>%
# use ggplot() to plot PPI for each species, grouped by sex.
# the first term just sets up the plot object by saying what the x, y, and grouping variables will be.
# the second term specifies a "layer" of the plot's appearance-- in this case, a boxplot.
# Note that we don't have to specify our data set for either argument because it is inherited from the pipe.
# Also note that we don't have to re-specify our x, y, and grouping variable in geom_bopxlot because it inherits
# these from the first term (unless we tell it otherwise).
ggplot(aes(x = species, y = pengPlumpInd, by = sex)) + geom_boxplot(aes(color = sex))
# filter() to remove rows where sex is NA,
filter(penguins, !is.na(sex)) %>%
# mutate() to calculate penguin plumpness index from body mass and flipper length
mutate(pengPlumpInd = body_mass_g / flipper_length_mm) %>%
# use ggplot() to plot PPI for each species, grouped by sex.
# Can omit the "by" argument in ggplot() because we apply colors by the same grouping structure in geom_boxplot.
ggplot(aes(x = species, y = pengPlumpInd)) + geom_boxplot(aes(color = sex)) %>% group_by(island)
# filter() to remove rows where sex is NA,
filter(penguins, !is.na(sex)) %>%
# mutate() to calculate penguin plumpness index from body mass and flipper length
mutate(pengPlumpInd = body_mass_g / flipper_length_mm) %>%
group_by(island) %>%
# use ggplot() to plot PPI for each species, grouped by sex.
# Can omit the "by" argument in ggplot() because we apply colors by the same grouping structure in geom_boxplot.
ggplot(aes(x = species, y = pengPlumpInd)) + geom_boxplot(aes(color = sex))
# filter() to remove rows where sex is NA,
filter(penguins, !is.na(sex)) %>%
# mutate() to calculate penguin plumpness index from body mass and flipper length
mutate(pengPlumpInd = body_mass_g / flipper_length_mm) %>%
group_by(island) %>%
# use ggplot() to plot PPI for each species, grouped by sex.
# Can omit the "by" argument in ggplot() because we apply colors by the same grouping structure in geom_boxplot.
ggplot(aes(x = species, y = pengPlumpInd)) + geom_boxplot(aes(color = sex))
# filter() to remove rows where sex is NA,
filter(penguins, !is.na(sex)) %>%
# mutate() to calculate penguin plumpness index from body mass and flipper length
mutate(pengPlumpInd = body_mass_g / flipper_length_mm) %>%
group_by(island) %>%
# use ggplot() to plot PPI for each species, grouped by sex.
# Can omit the "by" argument in ggplot() because we apply colors by the same grouping structure in geom_boxplot.
ggplot(aes(x = species, y = pengPlumpInd)) + geom_boxplot(aes(color = sex)) +facet_wrap(facets = island)
# filter() to remove rows where sex is NA,
filter(penguins, !is.na(sex)) %>%
# mutate() to calculate penguin plumpness index from body mass and flipper length
mutate(pengPlumpInd = body_mass_g / flipper_length_mm) %>%
group_by(island) %>%
# use ggplot() to plot PPI for each species, grouped by sex.
# Can omit the "by" argument in ggplot() because we apply colors by the same grouping structure in geom_boxplot.
ggplot(aes(x = species, y = pengPlumpInd)) + geom_boxplot(aes(color = sex)) +facet_wrap(~island)
# filter() to remove rows where sex is NA,
filter(penguins, !is.na(sex)) %>%
# mutate() to calculate penguin plumpness index from body mass and flipper length
mutate(pengPlumpInd = body_mass_g / flipper_length_mm) %>%
group_by(island) %>%
# use ggplot() to plot PPI for each species, grouped by sex.
# Can omit the "by" argument in ggplot() because we apply colors by the same grouping structure in geom_boxplot.
ggplot(aes(x = species, y = mean_body_mass_g)) + geom_boxplot(aes(color = sex)) +facet_wrap(~island)
# filter() to remove rows where sex is NA,
filter(penguins, !is.na(sex)) %>%
# mutate() to calculate penguin plumpness index from body mass and flipper length
mutate(pengPlumpInd = body_mass_g / flipper_length_mm) %>%
group_by(island) %>%
# use ggplot() to plot PPI for each species, grouped by sex.
# Can omit the "by" argument in ggplot() because we apply colors by the same grouping structure in geom_boxplot.
ggplot(aes(x = species, y = body_mass_g)) + geom_boxplot(aes(color = sex)) +facet_wrap(~island)
# filter() to remove rows where sex is NA,
filter(penguins, !is.na(sex)) %>%
# mutate() to calculate penguin plumpness index from body mass and flipper length
mutate(pengPlumpInd = body_mass_g / flipper_length_mm) %>%
# use ggplot() to plot PPI for each species, grouped by sex.
# This time, specify that boxplots should differ in color depending on sex.
ggplot(aes(x = species, y = pengPlumpInd, by = sex)) +
geom_boxplot(aes(color = sex))
# filter() to remove rows where sex is NA,
filter(penguins, !is.na(sex)) %>%
# mutate() to calculate penguin plumpness index from body mass and flipper length
mutate(pengPlumpInd = body_mass_g / flipper_length_mm) %>%
# use ggplot() to plot PPI for each species, grouped by sex.
# Can omit the "by" argument in ggplot() because we apply colors by the same grouping structure in geom_boxplot.
ggplot(aes(x = species, y = pengPlumpInd)) +
geom_boxplot(aes(color = sex))
# filter() to remove rows where sex is NA,
filter(penguins, !is.na(sex)) %>%
# mutate() to calculate penguin plumpness index from body mass and flipper length
mutate(pengPlumpInd = body_mass_g / flipper_length_mm) %>%
# use ggplot() to plot PPI for each species, grouped by sex.
# Can omit the "by" argument in ggplot() because we apply colors by the same grouping structure in geom_boxplot.
ggplot(aes(x = species, y = pengPlumpInd)) +
geom_boxplot(aes(color = sex)) +
xlabel("Species") +
ylabel("Penguin Plumpness Index (PPI)")
# filter() to remove rows where sex is NA,
filter(penguins, !is.na(sex)) %>%
# mutate() to calculate penguin plumpness index from body mass and flipper length
mutate(pengPlumpInd = body_mass_g / flipper_length_mm) %>%
# use ggplot() to plot PPI for each species, grouped by sex.
# Can omit the "by" argument in ggplot() because we apply colors by the same grouping structure in geom_boxplot.
ggplot(aes(x = species, y = pengPlumpInd)) +
geom_boxplot(aes(color = sex)) +
xlab("Species") +
ylab("Penguin Plumpness Index (PPI)")
# filter() to remove rows where sex is NA,
filter(penguins, !is.na(sex)) %>%
# mutate() to calculate penguin plumpness index from body mass and flipper length
select(species == "Adelie") %>%
# use ggplot() to plot PPI for each species, grouped by sex.
# Can omit the "by" argument in ggplot() because we apply colors by the same grouping structure in geom_boxplot.
ggplot(aes(x = species, y = body_mass_g)) + geom_boxplot(aes(color = sex)) +facet_wrap(~island)
# filter() to remove rows where sex is NA,
filter(penguins, !is.na(sex)) %>%
# mutate() to calculate penguin plumpness index from body mass and flipper length
select(species == "Adelie") %>%
# use ggplot() to plot PPI for each species, grouped by sex.
# Can omit the "by" argument in ggplot() because we apply colors by the same grouping structure in geom_boxplot.
ggplot(aes(x = species, y = body_mass_g)) + geom_boxplot(aes(color = sex)) +facet_wrap(~island)
filter(penguins, !is.na(sex))
# filter() to remove rows where sex is NA,
filter(penguins, !is.na(sex) & species == "Adelie") %>%
ggplot(aes(x = species, y = body_mass_g)) + geom_boxplot(aes(color = sex)) +facet_wrap(~island)
print(penguins)
penguins %>% pivot_wider(names_from = year, values_from = bill_lenth_mm)
penguins %>% pivot_wider(names_from = year, values_from = bill_length_mm)
print(penguins_raw)
# filter() to remove rows where sex is NA,
filter(penguins, !is.na(sex)) %>%
# mutate() to calculate penguin plumpness index from body mass and flipper length
mutate(pengPlumpInd = body_mass_g / flipper_length_mm) %>%
# group data by sex
group_by(species, island, sex) %>%
# summarize groups in terms of mean body manss, sd in body mass, mean PPI, and sd in PPI
summarize(meanBodyMassg = mean(body_mass_g),
sdBodyMassg = sd(body_mass_g),
CVBodyMassg = sdBodyMassg / meanBodyMassg,
meanPPI = mean(pengPlumpInd),
sdPPI = sd(pengPlumpInd),
sampleSize = n()) %>%
# sort by descending body mass to get largest at top -- careful that we sort on the new summary variables, not theoriginal variables!
arrange(desc(meanBodyMassg))
Let's try taking names from the variable `island` and values from the variable `meanBodyMassg`.
q
)))
penguins %>% pivot_wider(names_from = island, values_from = meanBodyMassg)
# filter() to remove rows where sex is NA,
filter(penguins, !is.na(sex)) %>%
# mutate() to calculate penguin plumpness index from body mass and flipper length
mutate(pengPlumpInd = body_mass_g / flipper_length_mm) %>%
# group data by sex
group_by(species, island, sex) %>%
# summarize groups in terms of mean body manss, sd in body mass, mean PPI, and sd in PPI
summarize(meanBodyMassg = mean(body_mass_g),
sdBodyMassg = sd(body_mass_g),
CVBodyMassg = sdBodyMassg / meanBodyMassg,
meanPPI = mean(pengPlumpInd),
sdPPI = sd(pengPlumpInd),
sampleSize = n()) %>%
# sort by descending body mass to get largest at top -- careful that we sort on the new summary variables, not theoriginal variables!
arrange(desc(meanBodyMassg)) %>%
# use pivot_wider() to turn values of island into their own columns, with the corresponding value of mean body mass contained in each.
pivot_wider(names_from = island, values_from = meanBodyMassg)
# filter() to remove rows where sex is NA,
filter(penguins, !is.na(sex)) %>%
# mutate() to calculate penguin plumpness index from body mass and flipper length
mutate(pengPlumpInd = body_mass_g / flipper_length_mm) %>%
# group data by sex
group_by(species, island, sex) %>%
# summarize groups in terms of mean body manss, sd in body mass, mean PPI, and sd in PPI
summarize(meanBodyMassg = mean(body_mass_g),
sdBodyMassg = sd(body_mass_g),
CVBodyMassg = sdBodyMassg / meanBodyMassg,
meanPPI = mean(pengPlumpInd),
sdPPI = sd(pengPlumpInd),
sampleSize = n()) %>%
# sort by descending body mass to get largest at top -- careful that we sort on the new summary variables, not theoriginal variables!
arrange(desc(meanBodyMassg)) %>% ungroup() %>%
# use pivot_wider() to turn values of island into their own columns, with the corresponding value of mean body mass contained in each.
pivot_wider(names_from = island, values_from = meanBodyMassg)
# filter() to remove rows where sex is NA,
filter(penguins, !is.na(sex)) %>%
# mutate() to calculate penguin plumpness index from body mass and flipper length
mutate(pengPlumpInd = body_mass_g / flipper_length_mm) %>%
# group data by sex
group_by(species, island, sex) %>%
# summarize groups in terms of mean body manss, sd in body mass, mean PPI, and sd in PPI
summarize(meanBodyMassg = mean(body_mass_g),
sdBodyMassg = sd(body_mass_g),
CVBodyMassg = sdBodyMassg / meanBodyMassg,
meanPPI = mean(pengPlumpInd),
sdPPI = sd(pengPlumpInd),
sampleSize = n()) %>%
# use pivot_wider() to turn values of island into their own columns, with the corresponding value of mean body mass contained in each.
pivot_wider(names_from = island, values_from = meanBodyMassg)
# filter() to remove rows where sex is NA,
filter(penguins, !is.na(sex)) %>%
# mutate() to calculate penguin plumpness index from body mass and flipper length
mutate(pengPlumpInd = body_mass_g / flipper_length_mm) %>%
# group data by sex
group_by(species, island, sex) %>%
# summarize groups in terms of mean body manss, sd in body mass, mean PPI, and sd in PPI
summarize(meanBodyMassg = mean(body_mass_g),
sdBodyMassg = sd(body_mass_g),
CVBodyMassg = sdBodyMassg / meanBodyMassg,
meanPPI = mean(pengPlumpInd),
sdPPI = sd(pengPlumpInd),
sampleSize = n()) %>% ungroup() %>%
# use pivot_wider() to turn values of island into their own columns, with the corresponding value of mean body mass contained in each.
pivot_wider(names_from = island, values_from = meanBodyMassg)
# filter() to remove rows where sex is NA,
filter(penguins, !is.na(sex)) %>%
# mutate() to calculate penguin plumpness index from body mass and flipper length
mutate(pengPlumpInd = body_mass_g / flipper_length_mm) %>%
# group data by sex
group_by(species, island, sex) %>%
# summarize groups in terms of mean body manss, sd in body mass, mean PPI, and sd in PPI
summarize(meanBodyMassg = mean(body_mass_g),
sdBodyMassg = sd(body_mass_g),
CVBodyMassg = sdBodyMassg / meanBodyMassg,
meanPPI = mean(pengPlumpInd),
sdPPI = sd(pengPlumpInd),
sampleSize = n())
# filter() to remove rows where sex is NA,
filter(penguins, !is.na(sex)) %>%
# mutate() to calculate penguin plumpness index from body mass and flipper length
mutate(pengPlumpInd = body_mass_g / flipper_length_mm) %>%
# group data by sex
group_by(species, island, sex) %>%
# summarize groups in terms of mean body manss, sd in body mass, mean PPI, and sd in PPI
summarize(meanBodyMassg = mean(body_mass_g),
sdBodyMassg = sd(body_mass_g),
CVBodyMassg = sdBodyMassg / meanBodyMassg,
meanPPI = mean(pengPlumpInd),
sdPPI = sd(pengPlumpInd),
sampleSize = n()) %>% ungroup() %>%
# use pivot_wider() to turn values of island into their own columns, with the corresponding value of mean body mass contained in each.
pivot_wider(names_from = sex, values_from = meanBodyMassg)
island
# filter() to remove rows where sex is NA,
filter(penguins, !is.na(sex)) %>%
# mutate() to calculate penguin plumpness index from body mass and flipper length
mutate(pengPlumpInd = body_mass_g / flipper_length_mm) %>%
# group data by sex
group_by(species, island, sex) %>%
# summarize groups in terms of mean body manss, sd in body mass, mean PPI, and sd in PPI
summarize(meanBodyMassg = mean(body_mass_g),
sdBodyMassg = sd(body_mass_g),
CVBodyMassg = sdBodyMassg / meanBodyMassg,
meanPPI = mean(pengPlumpInd),
sdPPI = sd(pengPlumpInd),
sampleSize = n()) %>% ungroup() %>%
# use pivot_wider() to turn values of island into their own columns, with the corresponding value of mean body mass contained in each.
pivot_wider(names_from = island, values_from = meanBodyMassg)
# filter() to remove rows where sex is NA,
filter(penguins, !is.na(sex)) %>%
# mutate() to calculate penguin plumpness index from body mass and flipper length
mutate(pengPlumpInd = body_mass_g / flipper_length_mm) %>%
# group data by sex
group_by(species, island, sex) %>%
# summarize groups in terms of mean body manss, sd in body mass, mean PPI, and sd in PPI
summarize(meanBodyMassg = mean(body_mass_g),
sdBodyMassg = sd(body_mass_g),
CVBodyMassg = sdBodyMassg / meanBodyMassg,
meanPPI = mean(pengPlumpInd),
sdPPI = sd(pengPlumpInd),
sampleSize = n()) %>%
# use pivot_wider() to turn values of island into their own columns, with the corresponding value of mean body mass contained in each.
pivot_wider(names_from = island, values_from = meanBodyMassg)
# filter() to remove rows where sex is NA,
filter(penguins, !is.na(sex)) %>%
# mutate() to calculate penguin plumpness index from body mass and flipper length
mutate(pengPlumpInd = body_mass_g / flipper_length_mm) %>%
# group data by sex
group_by(species, island, sex) %>%
# summarize groups in terms of mean body manss, sd in body mass, mean PPI, and sd in PPI
summarize(meanBodyMassg = mean(body_mass_g),
sdBodyMassg = sd(body_mass_g),
CVBodyMassg = sdBodyMassg / meanBodyMassg,
meanPPI = mean(pengPlumpInd),
sdPPI = sd(pengPlumpInd),
sampleSize = n()) %>%
select(island, sex, meanBodyMassg) %>%
# use pivot_wider() to turn values of island into their own columns, with the corresponding value of mean body mass contained in each.
pivot_wider(names_from = island, values_from = meanBodyMassg)
# filter() to remove rows where sex is NA,
filter(penguins, !is.na(sex)) %>%
# mutate() to calculate penguin plumpness index from body mass and flipper length
mutate(pengPlumpInd = body_mass_g / flipper_length_mm) %>%
# group data by sex
group_by(species, island, sex) %>%
# summarize groups in terms of mean body manss, sd in body mass, mean PPI, and sd in PPI
summarize(meanBodyMassg = mean(body_mass_g),
sdBodyMassg = sd(body_mass_g),
CVBodyMassg = sdBodyMassg / meanBodyMassg,
meanPPI = mean(pengPlumpInd),
sdPPI = sd(pengPlumpInd),
sampleSize = n()) %>%
# be sure to select *only* the variables you need in your wider table, else things will get messy.
select(island, sex, meanBodyMassg) %>%
# use pivot_wider() to turn values of island into their own columns, with the corresponding value of mean body mass contained in each.
pivot_wider(names_from = island, values_from = meanBodyMassg)
# filter() to remove rows where sex is NA,
filter(penguins, !is.na(sex)) %>%
# mutate() to calculate penguin plumpness index from body mass and flipper length
mutate(pengPlumpInd = body_mass_g / flipper_length_mm) %>%
# group data by sex
group_by(species, island, sex) %>%
# summarize groups in terms of mean body manss, sd in body mass, mean PPI, and sd in PPI
summarize(meanBodyMassg = mean(body_mass_g),
sdBodyMassg = sd(body_mass_g),
CVBodyMassg = sdBodyMassg / meanBodyMassg,
meanPPI = mean(pengPlumpInd),
sdPPI = sd(pengPlumpInd),
sampleSize = n()) %>%
# be sure to select *only* the variables you need in your wider table, else things will get messy.
select(island, sex, meanBodyMassg) %>%
# use pivot_wider() to turn values of island into their own columns, with the corresponding value of mean body mass contained in each.
pivot_wider(names_from = island, values_from = meanBodyMassg) %>%
pivot_longer(cols = c(Biscoe, Dream, Torgersen), names_to = island, values_to = meanBodyMassg)
# filter() to remove rows where sex is NA,
filter(penguins, !is.na(sex)) %>%
# mutate() to calculate penguin plumpness index from body mass and flipper length
mutate(pengPlumpInd = body_mass_g / flipper_length_mm) %>%
# group data by sex
group_by(species, island, sex) %>%
# summarize groups in terms of mean body manss, sd in body mass, mean PPI, and sd in PPI
summarize(meanBodyMassg = mean(body_mass_g),
sdBodyMassg = sd(body_mass_g),
CVBodyMassg = sdBodyMassg / meanBodyMassg,
meanPPI = mean(pengPlumpInd),
sdPPI = sd(pengPlumpInd),
sampleSize = n()) %>%
# be sure to select *only* the variables you need in your wider table, else things will get messy.
select(island, sex, meanBodyMassg) %>%
# use pivot_wider() to turn values of island into their own columns, with the corresponding value of mean body mass contained in each.
pivot_wider(names_from = island, values_from = meanBodyMassg) %>%
pivot_longer(cols = c(Biscoe, Dream, Torgersen), names_to = "island", values_to = "meanBodyMassg")
# filter penguins to remove rows for which sex is unknown, then group the data by sex, and then calculate mean body mass for each group.
filter(penguins, !is.na(sex)) %>% group_by(sex) %>% summarize(meanBodyMassg = mean(body_mass_g))
library(ggplot2)
library(palmerpenguins) # load it in current R session
penguins_df = as.data.frame(penguins) # Create a new object called penguins_df. This object is the penguins tibble, but as a data frame.
gc()
ggplot(penguins_df, aes(x = flipper_length_mm, y = body_mass_g, shape = sex, color = species)) +
geom_point(na.rm = TRUE) +
scale_color_manual(values = hcl.colors(n = 3, palette = "Harmonic")) +
scale_shape_manual(breaks = c("female", "male"), values = c(10, 4)) +
labs(x = "Flipper Length (mm)", y = "Body Mass (g)") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_text(size = 16),
legend.position = "bottom",
aspect.ratio = 1) +
geom_smooth(method = "lm", se = TRUE) # the additional argument se = TRUE tells R to show the confidence intervals too.
ggplot(penguins_df, aes(x = flipper_length_mm, y = body_mass_g, shape = sex, color = species)) +
geom_point(na.rm = TRUE) +
scale_color_manual(values = hcl.colors(n = 3, palette = "Harmonic")) +
scale_shape_manual(breaks = c("female", "male"), values = c(10, 4)) +
labs(x = "Flipper Length (mm)", y = "Body Mass (g)") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_text(size = 16),
legend.position = "bottom",
aspect.ratio = 1) +
geom_smooth(inherit.aes = FALSE, aes(x = flipper_length_mm, y = body_mass_g), method = "lm", se = TRUE) # the additional argument se = TRUE tells R to show the confidence intervals too.
ggplot(penguins_df, aes(x = flipper_length_mm, y = body_mass_g, shape = sex, color = species)) + # remove species from global aesthetics
geom_point(na.rm = TRUE) +
scale_color_manual(values = hcl.colors(n = 3, palette = "Harmonic")) +
scale_shape_manual(breaks = c("female", "male"), values = c(10, 4)) +
labs(x = "Flipper Length (mm)", y = "Body Mass (g)") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_text(size = 16),
legend.position = "bottom",
aspect.ratio = 1) +
# change geom_smooth back so that it uses the "global" aesthetics
geom_smooth(inherit.aes = FALSE, aes(x = flipper_length_mm, y = body_mass_g), method = "lm", se = TRUE) +
facet_wrap(~ species) # make subplots for each species using facet_wrap().
ggplot(penguins_df, aes(x = flipper_length_mm, y = body_mass_g, shape = sex, color = species)) + # remove species from global aesthetics
geom_point(na.rm = TRUE) +
scale_color_manual(values = hcl.colors(n = 3, palette = "Harmonic")) +
scale_shape_manual(breaks = c("female", "male"), values = c(10, 4)) +
labs(x = "Flipper Length (mm)", y = "Body Mass (g)") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_text(size = 16),
legend.position = "bottom",
aspect.ratio = 1) +
# change geom_smooth back so that it uses the "global" aesthetics
geom_smooth(method = "lm", se = TRUE) +
facet_wrap(~ species) # make subplots for each species using facet_wrap().
ggplot(penguins_df[!is.na(penguins_df$sex),],
aes(x = flipper_length_mm, y = body_mass_g, shape = sex, color = species)) + # can still color by species for emphasis
geom_point(na.rm = TRUE) +
scale_color_manual(values = hcl.colors(n = 3, palette = "Harmonic")) +
scale_shape_manual(breaks = c("female", "male"), values = c(10, 4)) +
labs(x = "Flipper Length (mm)", y = "Body Mass (g)") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_text(size = 16),
legend.position = "bottom",
aspect.ratio = 1) +
# change geom_smooth back so that it uses the "global" aesthetics
geom_smooth(method = "lm", se = TRUE) +
facet_wrap(~ species) # make subplots for each species using facet_wrap().
# create an object, called pbase here, to store a graphic. Let's store the graphic with sex mapped to shape and color to species, with a trendline, but no facetting.
pbase = ggplot(penguins_df[!is.na(penguins_df$sex),],
aes(x = flipper_length_mm, y = body_mass_g, shape = sex, color = species)) + # can still color by species for emphasis
geom_point(na.rm = TRUE) +
scale_color_manual(values = hcl.colors(n = 3, palette = "Harmonic")) +
scale_shape_manual(breaks = c("female", "male"), values = c(10, 4)) +
labs(x = "Flipper Length (mm)", y = "Body Mass (g)") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_text(size = 16),
legend.position = "bottom",
aspect.ratio = 1) +
# change geom_smooth back so that it uses the "global" aesthetics
geom_smooth(method = "lm", se = TRUE)
# look at the object
pbase
pbase + facet_wrap(~ species)
?grid.arrange
ggplot(penguins_df[!is.na(penguins_df$sex),],
aes(x = flipper_length_mm, y = body_mass_g, shape = sex, color = species)) + # can still color by species for emphasis
geom_point(na.rm = TRUE) +
scale_color_manual(values = hcl.colors(n = 3, palette = "Harmonic")) +
scale_shape_manual(breaks = c("female", "male"), values = c(10, 4)) +
labs(x = "Flipper Length (mm)", y = "Body Mass (g)") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_text(size = 16),
legend.position = "bottom",
aspect.ratio = 1) +
# change geom_smooth back so that it uses the "global" aesthetics
geom_smooth(method = "lm", formula = y ~ x^2, se = TRUE) +
facet_wrap(~ species) # make subplots for each species using facet_wrap().
ggplot(penguins_df[!is.na(penguins_df$sex),],
aes(x = flipper_length_mm, y = body_mass_g, shape = sex, color = species)) + # can still color by species for emphasis
geom_point(na.rm = TRUE) +
scale_color_manual(values = hcl.colors(n = 3, palette = "Harmonic")) +
scale_shape_manual(breaks = c("female", "male"), values = c(10, 4)) +
labs(x = "Flipper Length (mm)", y = "Body Mass (g)") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_text(size = 16),
legend.position = "bottom",
aspect.ratio = 1) +
# change geom_smooth back so that it uses the "global" aesthetics
geom_smooth(method = "loess", se = TRUE) +
facet_wrap(~ species) # make subplots for each species using facet_wrap().
ggplot(penguins_df[!is.na(penguins_df$sex),],
aes(x = flipper_length_mm, y = body_mass_g, shape = sex, color = species)) + # can still color by species for emphasis
geom_point(na.rm = TRUE) +
scale_color_manual(values = hcl.colors(n = 3, palette = "Harmonic")) +
scale_shape_manual(breaks = c("female", "male"), values = c(10, 4)) +
labs(x = "Flipper Length (mm)", y = "Body Mass (g)") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_text(size = 16),
legend.position = "bottom",
aspect.ratio = 1) +
# change geom_smooth back so that it uses the "global" aesthetics
geom_smooth(method = "lm", formula = y~poly(x,2), se = TRUE) +
facet_wrap(~ species) # make subplots for each species using facet_wrap().
ggplot(penguins_df[!is.na(penguins_df$sex),],
aes(x = flipper_length_mm, y = body_mass_g, shape = sex, color = species)) + # can still color by species for emphasis
geom_point(na.rm = TRUE) +
scale_color_manual(values = hcl.colors(n = 3, palette = "Harmonic")) +
scale_shape_manual(breaks = c("female", "male"), values = c(10, 4)) +
labs(x = "Flipper Length (mm)", y = "Body Mass (g)") +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.title = element_text(size = 16),
legend.position = "bottom",
aspect.ratio = 1) +
# change geom_smooth back so that it uses the "global" aesthetics
geom_smooth(method = "lm", se = TRUE) +
facet_wrap(~ species) # make subplots for each species using facet_wrap().
